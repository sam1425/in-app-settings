declare type JSONRPCMethods = 'Flow.Launcher.ChangeQuery' | 'Flow.Launcher.RestartApp' | 'Flow.Launcher.SaveAppAllSettings' | 'Flow.Launcher.CheckForNewUpdate' | 'Flow.Launcher.ShellRun' | 'Flow.Launcher.CloseApp' | 'Flow.Launcher.HideApp' | 'Flow.Launcher.ShowApp' | 'Flow.Launcher.ShowMsg' | 'Flow.Launcher.GetTranslation' | 'Flow.Launcher.OpenSettingDialog' | 'Flow.Launcher.GetAllPlugins' | 'Flow.Launcher.StartLoadingBar' | 'Flow.Launcher.StopLoadingBar' | 'Flow.Launcher.ReloadAllPluginData' | 'query';
declare type Methods<T> = JSONRPCMethods | T;
declare type MethodsObj<T> = {
    [key in Methods<T> extends string ? Methods<T> : JSONRPCMethods | (string & {})]: () => void;
};
interface Data<TMethods, TSettings> {
    method: keyof MethodsObj<TMethods>;
    parameters: [string, boolean?] | [string, string, string];
    settings: TSettings;
}
export interface JSONRPCResponse<TMethods, TSettings = Record<string, string>> {
    title: string;
    subtitle?: string;
    method?: Data<TMethods, TSettings>['method'];
    params?: Data<TMethods, TSettings>['parameters'];
    iconPath?: string;
}
interface IFlow<TMethods, TSettings> {
    method: Data<TMethods, TSettings>['method'];
    params: string;
    settings: TSettings;
    on: (method: Data<TMethods, TSettings>['method'], callbackFn: () => void) => void;
    showResult: (...result: JSONRPCResponse<TMethods, TSettings>[]) => void;
    run: () => void;
}
export declare class Flow<TMethods, TSettings = Record<string, string>> implements IFlow<TMethods, TSettings> {
    private methods;
    private defaultIconPath;
    private readonly data;
    constructor(defaultIconPath?: string);
    get method(): Methods<TMethods> extends string ? string & Methods<TMethods> : JSONRPCMethods | (string & {});
    get params(): string;
    get settings(): TSettings;
    on(method: keyof MethodsObj<TMethods>, callbackFn: () => void): void;
    showResult(...result: JSONRPCResponse<TMethods, TSettings>[]): void;
    run(): void;
}
export {};
